const types = require('@babel/types');

// @babel/types主要用于创建AST的结点和判断结点类型
const visitor = {
     // AST中type为ImportDeclaration（import）结点会在这个地方进行处理）
     // 在遍历阶段， babel会先进行深度优先遍历来访问AST的每一个节点。 
     // 你可以为访问指定一个回调函数， 然后每当访问某个节点的时候， babel会调用这个函数， 并给函数传入当前访问的节点。
     // 在babel里， path是基于node的一层抽象， 它提供了node之间的联系， 即父级节点， 并提供了领域(scope) 上下文(context) 等信息。
     //  此外， path还提供了replaceWith、 insertBefore之类用于更新AST节点的函数。
    ImportDeclaration(path, ref = {}) {
      console.log('ref:', ref.opts);
      // 获取插件配置的options
      let options = ref.opts;
      let specifiers = path.node.specifiers;
      // 对指定库进行按需加载
      if (path.node.source.value === options.library) {
        let newImports = specifiers.map(function (specifier) {
          return types.ImportDeclaration([types.ImportDefaultSpecifier(specifier.local)],
           types.stringLiteral(`${path.node.source.value}/${specifier.local.name}`));
        });
        // 当前结点替换
        path.replaceWithMultiple(newImports);
      }
    }
  }

module.exports = function () {
  return {
    visitor
  };
}