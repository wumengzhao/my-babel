const types = require('@babel/types');
const hxPlugin = {
  // 访问者模式
  visitor: {
    // 在遍历阶段， babel会先进行深度优先遍历来访问AST的每一个节点。 
    // 你可以为访问指定一个回调函数， 然后每当访问某个节点的时候， babel会调用这个函数， 并给函数传入当前访问的节点。
    // 在babel里， path是基于node的一层抽象， 它提供了node之间的联系， 即父级节点， 并提供了领域(scope) 上下文(context) 等信息。
    //  此外， path还提供了replaceWith、 insertBefore之类用于更新AST节点的函数。
    Identifier(path) {
      // console.log('path-wmz:', path);
       let node = path.node;
       node.name = node.name.split('').reverse().join('');
    },
  },
}
module.exports = function () {
  return hxPlugin;
}